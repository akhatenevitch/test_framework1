[{"keyword": "Feature", "uri": "api/api.feature", "name": "api test", "id": "api/api.feature", "line": 2, "description": "", "tags": [{"name": "api", "line": 1}], "elements": [{"keyword": "Scenario", "id": "test_api", "name": "api test", "line": 4, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "When", "name": "I send GET request to /api/activity", "line": 5, "match": {"location": ""}, "result": {"status": "passed", "duration": 988618100}}, {"keyword": "Then", "name": "response code is 404", "line": 6, "match": {"location": ""}, "result": {"status": "failed", "error_message": "fixturefunc = <function check_response_code at 0x0000028B000BBA60>, request = <FixtureRequest for <Function test_api>>, kwargs = {'response_code': 404, 'scenario_context': {'response': <APIResponse url='https://www.boredapi.com/api/activity?key=5881028' status=200 status_text='OK'>}}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nvenv\\lib\\site-packages\\_pytest\\fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nscenario_context = {'response': <APIResponse url='https://www.boredapi.com/api/activity?key=5881028' status=200 status_text='OK'>}, response_code = 404\n\n    @then(\n        parsers.cfparse('response code is {response_code: Number}', extra_types={'Number': int}))\n    def check_response_code(scenario_context, response_code):\n>       assert scenario_context['response'].status == response_code\nE       AssertionError: assert 200 == 404\nE        +  where 200 = <APIResponse url='https://www.boredapi.com/api/activity?key=5881028' status=200 status_text='OK'>.status\n\ntest\\features\\steps\\api\\test_api.py:33: AssertionError", "duration": 334000}}]}]}]